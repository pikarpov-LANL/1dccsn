{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>COLLAPSO1D is a 1D lagrangian code for Core-Collapse Supernova (CCSN) modeling. For progenitors, it takes KEPLER generated data. Currently, there is support for Heger &amp; Woosley, 2000 and Sukhbold et al, 2016.</p> <p>Turbulence is treated through Machine Learning (ML) based models. The latter has been trained using the Sapsan ML pipeline.</p> <p>PyTorch is implemented based on pytorch-fortran.</p> License <p>COLLAPSO1D code has a BSD-style license, as found in the LICENSE file.</p> <p>\u00a9 2020. Triad National Security, LLC. All rights reserved. This program was produced under U.S. Government contract 89233218CNA000001 for Los Alamos National Laboratory (LANL), which is operated by Triad National Security, LLC for the U.S. Department of Energy/National Nuclear Security Administration. All rights in the program are reserved by Triad National Security, LLC, and the U.S. Department of Energy/National Nuclear Security Administration. The Government is granted for itself and others acting on its behalf a nonexclusive, paid-up, irrevocable worldwide license in this material to reproduce, prepare derivative works, distribute copies to the public, perform publicly and display publicly, and to permit others to do so.</p>"},{"location":"installation/","title":"Installation","text":"<p>COLLAPSO1D supports <code>gfortran</code> and Intel's Classic Fortran <code>ifort</code>. The latter runs ~70% faster, but requires a more involved installation. Instruction are given for Linux (tested on Ubuntu 20.04 and 22.04), with Mac specific commands in spoilers.</p>"},{"location":"installation/#defendencies","title":"Defendencies","text":""},{"location":"installation/#pybind11","title":"pybind11","text":"<p>Python bindings for C++, which are necessary for the PyTorch wrapper.</p> <pre><code>pip install pybind11\n</code></pre>"},{"location":"installation/#cmake","title":"CMake","text":"<p>Make sure you have <code>cmake</code> or install it by (tested on <code>cmake==3.22.1</code>) <pre><code>sudo apt install cmake\n</code></pre></p> Mac OS <pre><code>brew install cmake\n</code></pre>"},{"location":"installation/#pytorch","title":"PyTorch","text":"<p>To install the latest PyTorch 1.X or 2.X for CPU, follow the official instructions. Explicitly, the code has been tested with <code>torch==1.13.1</code> and <code>2.0.1</code>. I would highly recommend installing it in a dedicated conda environemnt. As an example, here is how to create one and install PyTorch: <pre><code>conda create -n py310 python=3.10\nconda activate py310\n\n# check the pytorch installation instructions!\npip install torch --index-url https://download.pytorch.org/whl/cpu\n</code></pre></p> <p>Warning</p> <p><code>torch&gt;=1.13.1</code> will work for inferencing, hence for the CCSN code will be fine, but loading and training the model will fail. Thus, <code>resnet_forward</code> will still work, but <code>polynomial</code> example will fail.</p>"},{"location":"installation/#eos-tables","title":"EOS Tables","text":"<p>You will also need to download the SFHo EOS Table and put it in the executable directory.</p> Mac OS <pre><code>brew install wget\n</code></pre> <p><pre><code>cd project/1dmlmix\nwget https://su.drive.sunet.se/index.php/s/FQkikyGcRnHTZNL/download/Hempel_SFHoEOS_rho222_temp180_ye60_version_1.3_20190605.h5\n</code></pre> Click to learn more about the EOS Tables in COLLAPSO1D.</p>"},{"location":"installation/#gfortran","title":"GFORTRAN","text":"<p>Both the main CCSN code and the PyTorch wrapper can be compiled with <code>gfortran &gt;= 9.4.0</code>. If missing, install it via: <pre><code>sudo apt install gfortran\n</code></pre></p> Mac OS <pre><code>brew install gfortran\n</code></pre> <p>In the <code>Makefile</code>, set <pre><code>COMPILER=gfortran\n</code></pre></p>"},{"location":"installation/#hdf5","title":"HDF5","text":"<p>EOS tables (SFHo by default) require an <code>hdf5</code> installation. If missing, get it via: <pre><code>sudo apt-get install libhdf5-dev\n</code></pre> Then you need to provide paths to the <code>hdf5</code> libraries in the <code>Makefile</code>. If yours differ from default, edit: <pre><code>HDF5PATH = /usr/lib/x86_64-linux-gnu/hdf5/serial\nHDF5INCS = -I/usr/include/hdf5/serial\n</code></pre></p> Mac OS <p><pre><code>brew install hdf5\n</code></pre> The paths will most likely be as follows: <pre><code>HDF5PATH = /opt/homebrew/lib\nHDF5INCS = -I/opt/homebrew/include\n</code></pre></p> <p>Add the following to you <code>~/.bashrc</code> and then <code>source ~/.bashrc</code>: <pre><code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:.\n</code></pre></p> Mac OS <p>You should add the above line to <code>.bash_profile</code> instead. Create it if it doesn't exist.</p>"},{"location":"installation/#test-installation","title":"Test Installation","text":"<p>Run the following to test your installation <pre><code>make\n</code></pre></p>"},{"location":"installation/#intel-ifort","title":"Intel <code>ifort</code>","text":"<p>I would highly recommend installing Intel's oneAPI through <code>APT</code>. Even though there are many options listed, a good number of them are bugged. In addition, we need to install a full basekit, instead of only the Fortran compiler, as there are issues with individual packages.</p> <p>Please follow APT Installation Guide on Intel's website to install <code>intel-hpckit</code>. After the pre-installation steps, you should run the following: <pre><code>sudo apt install intel-hpckit\n</code></pre> Next you will need to add executables to <code>PATH</code>. The easiest way is to run: <pre><code>source /opt/intel/oneapi/setvars.sh\n</code></pre> Add this line to your <code>~/.bashrc</code> to avoid re-running the above initialization on every start-up.</p> <p>In the <code>Makefile</code>, set <pre><code>COMPILER=ifort\n</code></pre></p> <p>Warning</p> <p>The <code>readout.f90</code> to convert unformatted binary output to readable text will still be compiled with <code>gfortran</code> (hardcoded in the <code>Makefile</code>), since <code>ifort</code> is ~x20 slower at parsing unformatted binary files for some reason. These slow downs have no effect of the actual CCSN calculation, hence <code>ifort</code> remains vastly superior for the main code.</p>"},{"location":"installation/#hdf5-with-ifort","title":"HDF5 with <code>ifort</code>","text":"<p>To use COLLAPSO1D with EOS Tables, we will also need to re-compile the <code>hdf5</code> library with <code>ifort</code>. For that, we need to do a custom installation of <code>hdf5</code>. I tested on hdf5-1.12.2.</p> <ol> <li>Download the latest HDF5 Source Code.</li> <li>Configure    <pre><code>FC=ifort FCFLAGS=\"-O3\" CC=icc CFLAGS=\"-O3\" ./configure --enable-fortran --enable-shared\n</code></pre></li> <li>Install     <pre><code>make install\n</code></pre></li> <li>Check     <pre><code>make check-install\n</code></pre></li> <li>Add library path    <pre><code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:{path_to_hdf5}/hdf5/lib\n</code></pre>     Add the above to your <code>~/.bashrc</code> to avoid re-running the above initialization on every start-up</li> </ol> <p>Full installation instructions detailing all of the available commands and flag can be found inside your hdf5 directory in <code>release_docs/INSTALL</code>.</p> <p>Lastly, don't forget to change in the COLLAPSO1D's <code>Makefile</code>. <pre><code>HDF5PATH={path_to_hdf5}/hdf5/lib\nHDF5INCS=-I{path_to_hdf5}/hdf5/include\n</code></pre></p>"},{"location":"installation/#troubleshoot","title":"Troubleshoot","text":""},{"location":"installation/#no-cmake_cxx_compiler-could-be-found","title":"<code>No CMAKE_CXX_COMPILER could be found</code>","text":"<p>CMake can't find your C compiler. Either check your GCC path or if you are on Ubuntu, run: <pre><code>sudo apt-get update &amp;&amp; sudo apt-get install build-essential\n</code></pre></p>"},{"location":"installation/#version-compatibility-issues","title":"Version Compatibility Issues","text":"<p>If you are having trouble getting the dependencies and COLLAPSO1D to work, please check the GitHub compilation test. The script sets up a clean Linux environment with explicitely defined package versions. It checks if COLLAPSO1D compiles correctly with <code>gfortran</code> on every push to the repo.</p> compilation_test.yml <pre><code>name: CompilationTest\non: [push]\njobs:\nbuild:\nruns-on: ubuntu-latest\nstrategy:\nmax-parallel: 4\nmatrix:\npython-version: ['3.10']\ngcc_v: [11]\ntorch_v: ['1.13.1']\nsteps:\n- uses: actions/checkout@v1\n- name: Set up Python ${{ matrix.python-version }}\nuses: actions/setup-python@v1\nwith:\npython-version: ${{ matrix.python-version }} - name: Install essentials\nrun: |\nsudo apt-get update\nsudo apt-get install -y build-essential\n- name: Install GFortran\nrun: |\nsudo add-apt-repository -y ppa:ubuntu-toolchain-r/test\nsudo apt-get install -y gcc-${{ matrix.gcc_v }} gfortran-${{ matrix.gcc_v }}\ngfortran --version\n- name: Install CMake\nrun: |\nsudo apt install -y cmake\n- name: Install HDF5\nrun: |\nsudo apt-get install -y libhdf5-dev\n- name: Install PyTorch\nrun: |\nsudo apt install -y python3-pip\npip3 install torch==${{ matrix.torch_v }}+cpu --extra-index-url https://download.pytorch.org/whl/cpu\n- name: Install pybind11\nrun: |\npip3 install pybind11\n- name: Env vars\nrun: |\nexport LD_LIBRARY_PATH=$LD_LIBRARY_PATH:.\n- name: Download EOS tables\nrun: |\nwget https://su.drive.sunet.se/index.php/s/FQkikyGcRnHTZNL/download/Hempel_SFHoEOS_rho222_temp180_ye60_version_1.3_20190605.h5 -P ./project/1dmlmix/        \n- name: Test compilation\nrun: |\nmake test\n# - name: Run polynomial example\n#   run: |\n#     make examples\n#     cd examples/polynomial/\n#     python setup_model.py\n#     ./polynomial traced_model.pt test.pt\n# - name: Run resnet-forward example\n#   run: |\n#     make examples\n#     cd examples/resnet-forward/\n#     python setup_model.py\n#     ./resnet-forward traced_model.pt        \n</code></pre>"},{"location":"quick_start/","title":"Quick Start","text":"<p>To process progenitor data and to compile the code with PyTorch included, all you need to do is run: <pre><code>make\n</code></pre></p> <p>Warning</p> <p>If you encounter any errors, please check Dependencies and refer to Troubleshoot.</p> <p>This will move the processed input data and executable to the project folder. To run the model: <pre><code>cd project/1dmlmix\n./1dmlmix\n</code></pre> Congratulations! You are collapsing a star!</p>"},{"location":"quick_start/#setup-details","title":"Setup details","text":""},{"location":"quick_start/#progenitor-data","title":"Progenitor Data","text":"<p>You can setup parameters and choose which stellar progenitor data to prepare. In our case, we are using Stan Woosley's datasets. <pre><code>vi prep_data/setup\n</code></pre> to process and move the data to the project folder: <pre><code>make data\n</code></pre> Take note of the <code>Number of cells</code> (depend on the initial cell mass), since that determines the grid size () parameter for the main simulation setup."},{"location":"quick_start/#1dccsn-simulation","title":"1dccsn simulation","text":"<p>All of the simulation parameters can be adjust here (don't forget about <code>&lt;Number of Cells (from Data)&gt;</code>): <pre><code>vi project/1dmlmix/setup\n</code></pre> Next to compile the eos tables and then the project itself: <pre><code>make eos\nmake project\n</code></pre> Lastly to run: <pre><code>cd project/1dmlmix\n./1dmlmix\n</code></pre> to process and move the data to the project folder: <pre><code>make data\n</code></pre> Take note of the <code>Number of cells</code> (depend on the initial cell mass), since that determines the grid size () parameter for the main simulation setup."},{"location":"quick_start/#binary-to-readable","title":"Binary to Readable","text":"<p>The setup can be done either by editing <code>setup_readout</code> or by cmd arguments. In the first case: <pre><code>cd project/1dmlmix\nvi setup_readout\n./readout\n</code></pre> or you can provide the same 3 arguemnts, (Input, Output, #Dumps), as arguments to the <code>readout</code> executable: <pre><code>cd project/1dmlmix\n./readout Input Output ndumps\n</code></pre></p>"},{"location":"quick_start/#make-commands","title":"Make Commands","text":"Command Description <code>make</code> combined data prep, eos tables, model compilation, and a binary to readable output executable <code>make data</code> data preparation <code>make eos</code> EOS Table read routines required for project compilation <code>make project</code> model compilation <code>make readout</code> to convert from binary output to readable tables, you need to run <code>./readout</code> <code>make examples</code> prepare PyTorch in Fortran integration examples <code>make test</code> test installation with gfortran <code>make clean</code> clean up everything"},{"location":"research/","title":"Research","text":"<p>COLLAPSO1D supports <code>gfortran</code> and Intel's Classic Fortran <code>ifort</code>. The latter runs ~70% faster, but requires a more involved installation.</p>"},{"location":"research/#modeling-1d-turbulence-in-core-collapse-supernovae-with-machine-learning","title":"Modeling 1D Turbulence in Core-Collapse Supernovae with Machine Learning","text":"<p>The simulations have been produced with PIMLTurb1D ML model. Below are the links to view and download evolution profiles for all tracked variables, e.g., velocity, entropy, pressure, etc. Both high-resolution 9000 grid points runs and the low resolution 2000 grid points runs are provided.</p> <p>Download the Baseline and ML enhanced models</p>"},{"location":"details/api/","title":"API","text":"<p>This is the main core-collapse code. It contains the following subroutines:</p> Subroutine Description hydro advances the system of hydro equations by one time step (print_nuloss variable is a flag to avoid printing nu losses the 2<sup>nd</sup> time) artvis updates the q-value for artificial viscosity coulomb computes Coulomb corrections as given in Shapiro and Teukolsky. p. 31 (2.4.9) and (2.4.11) density calculates the density using the continuity equaiton energ computes the change in internal energy eosflg determines what kind of eos to use depending on physical conditions: eosflg = 1: freeze-out, just Ocean's eos + Coul corr. eosflg = 2: NSE with Raph's routines, + Ocean eos + Coul eosflg = 3: Swesty's eos and if e-neutrinos or x-neutrinos are trapped eospg computes the pressure and sound speed for all particles on a list assuming a perfect gas equation of state eospgr computes the pressure, and sound speed according to an equation of state that includes gas and radiation pressure. This part of the code has not been debugged and most likely won't run eos3 compute pressure and temperatures with the Ocean eos assuming NSA forces computes the force on the cells that need to have their forces evaluated. Neutrino diffusion is also performed here. gravity adds the gravitational force on the particles. This will have the option of a neutron star core or it can allow the particles to make up the core. mmw sets the mean molecular weight of the gas assuming complete ionization nserho figures out the NSE eq. assuming that yp and yn were previously known at different density and ye, but \\textbf{same temperature} nsetemp figures out the NSE eq. assuming that yp and yn were previously known at the \\textbf{same density and ye, but different temperatures} nuabs computes the neutrino absorption by nucleons (all neutrino energies are in MeV) nuann computes the rate of neutrino anti- neutrino annihilation into e+/e- pairs (see Goodman, Dar, Nussinov, ApJ 314 L7) nubeta treats cases where beta eq. has occurred.In beta eq.: munue(beta)=mue-muhat, so we compute Ynue(munue(beta)) and unue(munue(beta)) assuming thermal distribution at matter temperature, compare with actual Ynue and unue, and move things in the right direction nucheck nuconv nudiff nuecap nuinit nulum nupp nupress nuscat nusphere nuwork pppb preset sets up all quantities needed before starting a simulation rmp amp rootemp1 computes temperature using a Newton-Raphson procedure found in the numerical recipes, p.254 rootemp2 rootemp3 rootemp4 rooteta slwrap wrapper routine for the swesty-lattimer eos readini reads initial conditions printout prints out all the results integrals numerical approximations to the fermi integrals (Takahashi et al, 1978) epcapture step integrates the system of equations using a Runge-Kutta-Fehlberg integrator of second order. Particles are allowed to have individual time-steps. All particles are synchronized every dtime at which time the subroutine is exited unit computes the transformation between the physical units (cgs) and the units used in the code, and the value of the physical constant in code units burn nuclear network subroutine - uses a 14 elements alpha network from fkt derivn calculates time derivatives of abundances i.e. ff(i) is a system of differential equations epsb change of total nuclear binding energy/mass units erg/g genpar lequb matr newab rates calculates rates  rrat(i) forward rates (captures 1-14) 15:CC 16:CO 17:OO  pf(7,i) coefficients  rlam(i) backward rates (1-14 photo-disintegrations) pb(7,i) coefficients rrate program reads coefficients of rates, pf forward rates, pb backward rates (=photodisintegrations)"},{"location":"details/eosdriver/","title":"EOS Tables","text":"<p>COLLAPSO1D supports a EOS tables through the integrated EOSdriver by Evan O'Connor. By default, the code is set up with SFHo tables in mind (download link). For a full list of supported tables, their format, and how they are interpolated upon read-in, please refer to Evan's official website and the corresponding GitHub repos. You will be able to download the formatted tables from there as well.</p>"},{"location":"details/eosdriver/#installation","title":"Installation","text":"<p>Tip</p> <p>COLLAPSO1D already inlcudes EOSdriver, so you don't need to perform this step.</p> <p>Here are the instructions to install standalone EOSdriver.</p> <ol> <li>Install hdf5 on linux (make sure it is serial, which is default)     <pre><code>sudo apt-get install libhdf5-dev\n</code></pre></li> <li>Get EOSdriver    <pre><code>git clone https://github.com/evanoconnor/EOSdriver.git\n</code></pre></li> <li>make driver executables<ol> <li>Edit <code>HDF5LIBS</code> and <code>HDF5INCS</code> in <code>make.inc</code> with correct hdf5 paths, e.g.     <pre><code>HDF5LIBS=-L/usr/lib/x86_64-linux-gnu/hdf5/serial -lhdf5_fortran -lhdf5 -lz\nHDF5INCS=-I/usr/include/hdf5/serial\n</code></pre></li> <li>type <code>make</code></li> </ol> </li> </ol>"},{"location":"details/eosdriver/#eosdriver-variables","title":"EOSdriver Variables","text":"nuc_eos_full Units Intent Description xrho g/cm^3 inout density xtemp MeV inout temperature xye number fraction / baryon in electron fraction xenr erg/g inout energy xprs dyn/cm^2 out pressure xent k_B / baryon inout entropy xcs2 cm<sup>2/s</sup>2 out speed of sound squared (not relativistic) xdedt \\(erg/g/MeV\\) out \\(C_{\\nu}\\) xdpderho \\(dynes \\; g/cm^2/erg\\) out \\(dP/d\\epsilon\\) at constant \\(\\rho\\) xdpdrhoe \\(dynes \\; cm^3/cm^2/g\\) out \\(dP/d\\rho\\) at constant \\(\\epsilon\\) xxa mass fraction out \\(\\alpha\\) particle mass fraction xxh mass fraction out average heavy nuclus mass fraction xxn mass fraction out neutron mass fraction xxp mass fraction out proton mass fraction xabar A out average heavy nucleus mass number xzbar Z out average heavy nucleus atomic number xmu_e \\(MeV\\) (or / baryon?) out electron chemical potential xmu_n \\(MeV\\) out neutron chemical potential xmu_p \\(MeV\\) out proton chemical potential xmuhat \\(MeV\\) out mu_n - mu_p keytemp 0,1,2,3 in primary value keyerr out error output; should be 0 rfeps in root finding relative accuracy, set around 1.0d-10"},{"location":"details/eosdriver/#io-of-eosdriver","title":"I/O of EOSdriver","text":"keytemp description <code>0</code> coming in with rho,eps,ye (solve for temp) <code>1</code> coming in with rho,temperature,ye <code>2</code> coming in with rho,entropy,ye (solve for temp) <code>3</code> coming in with pressure,temp,ye (solve for rho)"},{"location":"details/eosdriver/#eosdriver-vs-collapso1d","title":"EOSdriver vs. COLLAPSO1D","text":"<p>Comparison of the EOSdriver with COLLAPSO1D variables:</p> nuc_eos_full Units COLLAPSO1D Units xrho \\(g/cm^3\\) rho(k) 2.d6 \\(g/cm^3\\) xtemp \\(MeV\\) temp(k) 1.d9 \\(K\\) xye number fraction / baryon ye(k) same xenr \\(erg/g\\) u(k) uergg xprs \\(dyn/cm^2\\) pr(k) 2.d22 \\(dyn/cm^2\\) xent \\(k_B / baryon\\) u2 sfac xcs2 \\(cm^2/s^2\\) vsound 1.d8 \\(cm/s\\) xdedt \\(erg/g/MeV\\) dusl(?) does it matter? xdpderho \\(dynes \\; g/cm^2/erg\\) does it matter? xdpdrhoe \\(dynes \\; cm^3/cm^2/g\\) does it matter? xxa mass fraction xalpha(k) same xxh mass fraction xheavy(k) same xxn mass fraction xn(k) same xxp mass fraction xp(k) same xabar A abar(k) same xzbar Z zbar(k) does it matter? xmu_e \\(MeV\\) xmue(k) 1.d9 \\(K\\) xmu_n \\(MeV\\) does it matter? xmu_p \\(MeV\\) does it matter? xmuhat \\(MeV\\) xmuhat(k) 1.d9 \\(K\\) keytemp 0,1,2,3 keyerr rfeps"},{"location":"details/eosdriver/#slwrap-variables","title":"<code>slwrap</code> variables","text":"<p>Detailed description of COLLAPSO1D variables from <code>subroutine slwrap</code></p> COLLAPSO1D Description inpvar(1) temperature (may not need the others) k iterator yek electron franction (Ye) brydns density in sw units pprev funky proton fraction (probs not needed) psl pressure usl energy or entropy (probs the latter, but depends on which eos is used) dusl derivative of above? gamsl effective gamma for sound speed (won't be needed) etak degeneracy (can get it from electron chemical potential/T) xpk mass fractions xnk xak xhk yehk Ye mass fraction abark abar xmuh mu hat stot entropy"},{"location":"details/setup/","title":"Setup Parameters","text":""},{"location":"details/setup/#ccsn-code","title":"CCSN Code","text":"<p>Parameters in the <code>project/1dmlmix/setup</code></p> setup <pre><code>&lt;Input File&gt;\nData\n&lt;Output File&gt;\nDataOut\n&lt;Input PyTorch Model&gt;\nNone\n&lt;Input Grid Size to interpolate for PyTorch Model&gt;\n200\n&lt;Dump # to read&gt;\n0\n&lt;Dump time intervals [s]&gt;\n5.d-4\n&lt;Max time [s]&gt;\n0.7\n&lt;Artifiicqial Viscocity #1&gt;\n1.0\n&lt;Artificial Viscocity #2&gt;\n1.0\n&lt;External Force (not default)&gt;\n1\n&lt;EOS option&gt;\n5\n&lt;EOS Table Path&gt;\nHempel_SFHoEOS_rho222_temp180_ye60_version_1.3_20190605.h5\n&lt;If &gt; 1, include core mass&gt;\n2.d0\n&lt;delp (not default)&gt;\n1.d-5\n&lt;Number of steps per printout&gt;\n100\n&lt;Damping Term&gt;\n0.01\n&lt;Damping zones below this number&gt;\n1\n&lt;Flux limiter option&gt;\n1\n&lt;Capture rate option&gt;\n1\n&lt;Changing the nuclear potential energy (do not touch!)&gt;\n1.0\n&lt;yefact (not used)&gt;\n1.0\n&lt;Constant Pturb&gt;\n0.0\n</code></pre>"},{"location":"details/setup/#extra-options","title":"Extra options","text":""},{"location":"details/setup/#input-pytorch-model","title":"Input PyTorch Model","text":"Name Description <code>None</code> sets turbulent pressure to 0 and doesn't use any ML subroutines <code>ModelName.pt</code> uses ML subroutines (model name can be anything) <code>Constant</code> uses <code>subroutine turbpress_contant</code> to apply <code>&lt;Constant Pturb&gt;</code> defined to setup. Two mode ['mach', 'rhov2'] are available that need to be specified in <code>subroutine turbpress_constant</code>. Recompilation is required."},{"location":"details/setup/#eos-options","title":"EOS options","text":"EOS Subroutine Description <code>1</code> eospg perfect gas equation of state <code>2</code> eospgr equation of state that includes gas and radiation pressure <code>3</code> eos3 Ocean eos assuming NSE for low density and Swesty-Lattimer eos for high density above <code>rhoswe</code>. Uses energy as the primary variable. <code>4</code> eos3 Ocean eos assuming NSE for low density and Swesty-Lattimer eos for high density above <code>rhoswe</code>. Uses entropy as the primary variable. <code>5</code> eos5 SFHo EOS Tables with entropy as a primary variable."},{"location":"details/setup/#data-preparation","title":"Data Preparation","text":"<p>Edit <code>prep_data/setup_prep</code> for initial parameters, then run <code>make data</code> from root directory.</p> setup_prep <pre><code>&lt;Input File&gt;\nsukhbold2016/s19.0_presn\n\n&lt;Output File&gt;\nData\n\n&lt;Goal Size of the PNS&gt;\n600\n\n&lt;Goal Size of Convective Grid&gt;\n7000\n\n&lt;Goal Total Resolution&gt;\n8000\n\n&lt;Enclosed Mass Cutoff for the PNS (Msol)&gt;\n1.1\n\n&lt;Enclosed Mass Cutoff for Convective Region (Msol)&gt;\n1.7\n\n&lt;Initial Cell Mass&gt;\n4e-4\n\n&lt;Cell Mass Growth Rate past enclosed mass cutoff&gt;\n1e-3\n\n&lt;Maximum Radius of the Grid (cm)&gt;\n1500000000.0\n\n&lt;EOS option&gt;\n5\n\n&lt;EOS Table Path&gt;\n../project/1dmlmix/Hempel_SFHoEOS_rho222_temp180_ye60_version_1.3_20190605.h5\n</code></pre> <p>The grid in COLLAPSO1D is static and non-uniform, set by mass in each cell (<code>deltam</code>). It is split into 3 different regions:</p> Region Resolution Behavior PNS Medium linearly decreasing deltam Convection High constant Outer Low exponentially growing <p>For the PNS and Outer regions, growth rates are determined automatically within the code, based on the target grid cells. Convection region is defined as enclosed mass cutoff for (Convective Region - PNS)</p> <p>The parameters of most importance are as follows:</p> Parameter Goal Size of the PNS Goal Size of Convective Grid Goal Total Resolution Enclosed Mass Cutoff for the PNS (Msol) Enclosed Mass Cutoff for Convective Region (Msol) Maximum Radius of the Grid (cm) <p>Convective Region</p> <p>Mass in the Convective Region is defined as Convective Region cutoff minus PNS cutoff, i.e., lines 5 - 4 from the table above. Even though it is quite thin at any given moment, a lot of mass will be infalling. Since the grid is static Lagrangian, the high-resolution convective region has to account for all of the mass that will eventually pass through it, e.g. 0.15-0.3 \\(M_{\\odot}\\). This way, the region and the shock will be spatially resolved throughout the simulation runtime.</p>"},{"location":"details/setup/#outdated","title":"Outdated","text":"<p>After setting the target grid size and the convection region resolution, the last thing we need to actually vary is the enclosed mass of the convection region, since this is a Lagrangian code. We wanted target a convective region resolution of ~1000 to cover the region between 20 and 200 km, so here are the ecnlosed masses:</p> conv_region=1000 Progenitor Mass Enclosed Mass 9 1. 10 1. 11 1.31 12 1.31 13 1.33 14 1.35 15 1.35 16 1.37 17 1.37 18 1.35 19 1.37 20 1.39 21 1. 22 1. 23 1. 24 1. 25 1. conv_region=2000, pns=800, grid=4000 Progenitor Mass Enclosed Mass 11 1.4 12 1.42 13 1.46 14 1.46 15 1.46 16 1.46 17 1.47 18 1.48 19 1.49 20 1.5 <p>pns_cutoff = Enclosed Mass-0.16 for the 4k grid above. Maxrad was 5e9 cm for those runs.</p> <p>Note: all of the above checkout ~200km radius ~10ms after bounce</p> <p>Parameters for near ~4k resolution based on Sukhbold 2016 data. Maximum radius is 1e10 cm, i.e. 1e10 in code units.</p> OUTDATED: maxrad=1e1 Progenitor Mass Initial Cell Mass Result Grid Size 9 1.9e-5 3985 10 2.5e-5 3960 11 3.1e-5 3955 12 4e-5 3975 13 4.75e-5 3958 14 5.7e-5 3982 15 6.9e-5 3980 16 7.5e-5 3962 17 8e-5 3982 18 9.3e-5 3958 19 9.2e-5 3966 20 1.05e-4 3955 21 1.15e-4 4000 22 1.2e-4 3955 23 1.31e-4 3984 24 1.43e-4 3991 25 1.6e-4 3943 OUTDATED: variable maxrad Progenitor Mass Initial Cell Mass maxrad Result Grid Size 9 1.9e-5 1e1 3985 10 0.000063 3e4 3989 12 0.000085 6.5e4 3991 13 0.00009 6.5e4 3965 15 0.00012 6.5e4 3976 17 0.00014 6.5e4 3921 19 0.00015 6.5e4 3956"},{"location":"details/setup/#binary-to-readable","title":"Binary to Readable","text":"<p>Parameters in the <code>project/1dmlmix/setup_read</code></p> setup_readout <pre><code>&lt;Data File Name&gt;\nDataOut\n\n&lt;Output Basename&gt;\nDataOut_readable\n\n&lt;Number of dumps&gt;\n10000\n</code></pre>"},{"location":"details/units/","title":"Code Units","text":"<p>Unit conversion from numerical to CGS can be found in the <code>subroutine unit</code> in project/1dmlmix/1dmlmix.f90. Here is a summary table of basic units:</p> Quantity Units Mass 2e33 \\(g\\) Distance 1e9 \\(cm\\) Temperature 1e9 \\(K\\) Time 1e1 \\(s\\)"},{"location":"details/units/#conversion-constants","title":"Conversion Constants","text":"Name Value Comment ggcgs 6.67e-8 avo 6.02e23 aradcgs 7.565e-15 boltzk 1.381e-16 hbar 1.055e-27 ccgs 3e10 emssmev 0.511e0 boltzmev 8.617e-11 ergmev 6.2422e5 sigma1 9d-44 sigma2 5.6d-45 c2cgs 6.15e-4 c3cgs 5.04e-10 fermi 1d-13 uergg 1d16 ergs per gram"},{"location":"legacy/data_prep/","title":"Data Preparation","text":"<p>The data preparation files are located in <code>legacy/setup/</code></p>"},{"location":"legacy/data_prep/#compile","title":"Compile","text":"<pre><code>gfortran read_woosley.f -o a.out\n</code></pre>"},{"location":"legacy/data_prep/#run","title":"Run","text":"<pre><code>./a.out\n</code></pre> <p>It will prompt you for the innermost zone mass and then evolves the masses based on prescriptions that worked well a long time ago. Zone mass should be &lt;1. Lastly, it will ask for the final binary file name that will be used as an input for the simulation. The name of the input and output files should not contain underscores.</p>"},{"location":"legacy/data_prep/#defaults","title":"Defaults","text":"<p>Input file, i.e. progenitor mass, should be edited directly in the <code>read_woosley.f</code>. There are 3 available from Heger &amp; Woosley, 2000:</p> <ol> <li>s15presn </li> <li>s20presn (Default)</li> <li>s25presn</li> </ol> <p>For the prompts:</p> Prompt Value Innermost zone mass 0.0005 Binary file name Data <p>This will result in <code>grid_szie=1706</code></p>"},{"location":"legacy/legacy_installation/","title":"Installation","text":"<p>Legacy F77 &amp; F90 versions of COLLAPSO1D can be found in <code>legacy/</code> and they do not support <code>make</code> commands.</p>"},{"location":"legacy/legacy_installation/#quick-start","title":"Quick Start","text":"<p>First we need to compile a script to read the stellar progenitor data. In our case, we are using Stan Woosley's datasets: <pre><code>cd setup/\ngfortran read_woosley.f -o a.out\n./a.out\n</code></pre> when running <code>a.out</code>, it will ask for the innermost zone mass and then evolves the masses based on prescriptions that worked well a long time ago. Zone mass should be &lt;1. Lastly, it will ask for the final binary file name that will be used as an input for the simulation. The name of the input and output files should not contain underscores. <pre><code>./a.out\nmv InputName ../legacy/1dcollapse/\n</code></pre></p> <p>Next we need to compile the code itself, including the EOS: <pre><code>cd legacy/1dcollapse\ngfortran -O 1dmlmix.f90 ocean.f90 nse4c.f90 sleos.f90 -o model\n</code></pre></p> <p>Lastly, update <code>inlahyc</code> input file to read <code>InputName</code> and run the model: <pre><code>./model\n</code></pre></p>"},{"location":"legacy/legacy_installation/#data-defaults","title":"Data Defaults","text":"<p>Input file, i.e. progenitor mass, should be edited directly in the <code>read_woosley.f</code>. There are 3 available from Heger &amp; Woosley, 2000:</p> <ol> <li>s15presn </li> <li>s20presn (Default)</li> <li>s25presn</li> </ol> <p>For the prompts:</p> Prompt Value Innermost zone mass 0.0005 Binary file name Data <p>This will result in <code>grid_szie=1706</code></p>"},{"location":"legacy/legacy_installation/#model-setup-inlahyc","title":"Model Setup (inlahyc)","text":"<p>here is an example of how <code>inlahyc</code> looks like: <pre><code>Test\nTestOut\n1\n.0001 1.\n1.0 .25\n1 4 2.d0\n1206,1.d-5,1,0.01,1\n1,1,1.0,1.0\n</code></pre> Here is a description of each line:</p> Line Definition 1 input file name 2 output file name 3 dump # to read the input file 4 dump time interval and total timestep 5 artificial viscosity values 6 1. external force (not default)  2. equation of state option  3. if &gt; 1, include core mass 7 1. # of cells in the grid (hint: copy it from <code>./a.out</code> output's last line)  2. delp (not default)  3. nups - number of steps per luminosity output  4. damping term  5. damping zones below this number 8 1. iflxlm - flux limiter option  2. capture rate option  3. changing the nuclear potential energy - shouldn't be altered  4. yefact - not used"},{"location":"legacy/legacy_installation/#converting-f77-to-f90","title":"Converting f77 to f90","text":"<p>Both source code (<code>f77_to_f90.f90</code>) and the executable (<code>f77_to_f90</code>) are available in <code>legacy/</code>. Run the following and follow instructions:</p> <p><pre><code>./f77_to_f90 input.f output.f90\n</code></pre> where</p> <ul> <li><code>input.f</code> is the input FORTRAN77 file</li> <li><code>output.f90</code> is the output file, which has been converted.</li> </ul> <p>Warning</p> <p>If you encounter errors during conversion, check the <code>TAB</code> consistency throughout your F77 script</p> <p>For more information follow the original author, Michael Metcalfe.</p>"},{"location":"legacy/legacy_installation/#additional-notes","title":"Additional Notes","text":"<p>Notes on ML subgrid turbulence model implementation within this code can be found on Overleaf.</p>"},{"location":"wiki/wiki_setup/","title":"Wiki setup","text":""},{"location":"wiki/wiki_setup/#install-mkdocs","title":"Install MkDocs","text":"<pre><code>pip install mkdocs\n</code></pre> <p>Plugin to open images on the same page by zooming it: <pre><code>pip install mkdocs-glightbox\n</code></pre></p> <p>To compile live on save <pre><code>mkdocs serve\n</code></pre></p>"},{"location":"wiki/wiki_setup/#versioning","title":"Versioning","text":"<p>Consistency is TBD. <pre><code>pip install mike\n\n# make sure the default alias is 'latest'\nmike deploy --push --update-aliases 0.0.0 latest\nmike set-default --push latest\n</code></pre></p>"},{"location":"wiki/wiki_setup/#guidelines","title":"Guidelines","text":"<p>Even though mkdocs is pure markdown, there are many extensions and plugins included. For the ones used here, refer to mkdocs.yml. Furthermore, reference MkDocs Setup and Reference.</p>"},{"location":"wiki/wiki_setup/#api-template","title":"API Template","text":"<p>Refer to API_template.md for the API structure.</p>"}]}